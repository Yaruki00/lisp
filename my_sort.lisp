(defun my_qsort (x)
  (if (null (cdr x))
      x
    (if (= (length x) 2)
	(if (< (first x) (second x))
	    (list (first x) (second x))
	  (list (second x) (first x)))
      (let ((pibot (car x))
	    (bigger nil)
	    (smaller nil))
	(dolist (a (cdr x))
	  (if (< pibot a)
	      (if (not (listp bigger))
		  (setf bigger (list bigger a))
		(setf bigger (append bigger (list a))))
	    (if (not (listp smaller))
		(setf smaller (list small a))
	      (setf smaller (append smaller (list a))))))
	(if (not (null smaller))
	    (setf smaller (my_qsort smaller)))
	(if (not (null bigger))
	    (setf bigger (my_qsort bigger)))
	(append smaller (list pibot) bigger)))))

(format t "input list:")
(format t "max = ~A~%" (my_qsort (read)))